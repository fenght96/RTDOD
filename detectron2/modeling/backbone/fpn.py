# Copyright (c) Facebook, Inc. and its affiliates.
import math
import fvcore.nn.weight_init as weight_init
import torch.nn.functional as F
from torch import nn
import torch

from detectron2.layers import Conv2d, ShapeSpec, get_norm

from .backbone import Backbone
from .build import BACKBONE_REGISTRY
from .resnet import build_resnet_backbone
from .resnet_mask import build_resnet_mask_backbone


__all__ = ["build_resnet_fpn_backbone", "build_retinanet_resnet_fpn_backbone", "build_two_resnet_fpn_backbone", "FPN"]


class FPN(Backbone):
    """
    This module implements :paper:`FPN`.
    It creates pyramid features built on top of some input feature maps.
    """

    def __init__(
        self, bottom_up, in_features, out_channels, norm="", top_block=None, fuse_type="sum"
    ):
        """
        Args:
            bottom_up (Backbone): module representing the bottom up subnetwork.
                Must be a subclass of :class:`Backbone`. The multi-scale feature
                maps generated by the bottom up network, and listed in `in_features`,
                are used to generate FPN levels.
            in_features (list[str]): names of the input feature maps coming
                from the backbone to which FPN is attached. For example, if the
                backbone produces ["res2", "res3", "res4"], any *contiguous* sublist
                of these may be used; order must be from high to low resolution.
            out_channels (int): number of channels in the output feature maps.
            norm (str): the normalization to use.
            top_block (nn.Module or None): if provided, an extra operation will
                be performed on the output of the last (smallest resolution)
                FPN output, and the result will extend the result list. The top_block
                further downsamples the feature map. It must have an attribute
                "num_levels", meaning the number of extra FPN levels added by
                this block, and "in_feature", which is a string representing
                its input feature (e.g., p5).
            fuse_type (str): types for fusing the top down features and the lateral
                ones. It can be "sum" (default), which sums up element-wise; or "avg",
                which takes the element-wise mean of the two.
        """
        super(FPN, self).__init__()
        assert isinstance(bottom_up, Backbone)
        assert in_features, in_features

        # Feature map strides and channels from the bottom up network (e.g. ResNet)
        input_shapes = bottom_up.output_shape()
        strides = [input_shapes[f].stride for f in in_features]
        in_channels_per_feature = [input_shapes[f].channels for f in in_features]

        _assert_strides_are_log2_contiguous(strides)
        lateral_convs = []
        output_convs = []

        use_bias = norm == ""
        for idx, in_channels in enumerate(in_channels_per_feature):
            lateral_norm = get_norm(norm, out_channels)
            output_norm = get_norm(norm, out_channels)

            lateral_conv = Conv2d(
                in_channels, out_channels, kernel_size=1, bias=use_bias, norm=lateral_norm
            )
            output_conv = Conv2d(
                out_channels,
                out_channels,
                kernel_size=3,
                stride=1,
                padding=1,
                bias=use_bias,
                norm=output_norm,
            )
            weight_init.c2_xavier_fill(lateral_conv)
            weight_init.c2_xavier_fill(output_conv)
            stage = int(math.log2(strides[idx]))
            self.add_module("fpn_lateral{}".format(stage), lateral_conv)
            self.add_module("fpn_output{}".format(stage), output_conv)

            lateral_convs.append(lateral_conv)
            output_convs.append(output_conv)
        # Place convs into top-down order (from low to high resolution)
        # to make the top-down computation in forward clearer.
        self.lateral_convs = lateral_convs[::-1]
        self.output_convs = output_convs[::-1]
        self.top_block = top_block
        self.in_features = in_features
        self.bottom_up = bottom_up
        # Return feature names are "p<stage>", like ["p2", "p3", ..., "p6"]
        self._out_feature_strides = {"p{}".format(int(math.log2(s))): s for s in strides}
        # top block output feature maps.
        if self.top_block is not None:
            for s in range(stage, stage + self.top_block.num_levels):
                self._out_feature_strides["p{}".format(s + 1)] = 2 ** (s + 1)

        self._out_features = list(self._out_feature_strides.keys())
        self._out_feature_channels = {k: out_channels for k in self._out_features}
        self._size_divisibility = strides[-1]
        assert fuse_type in {"avg", "sum"}
        self._fuse_type = fuse_type

        # Scripting does not support this: https://github.com/pytorch/pytorch/issues/47334
        # have to do it in __init__ instead.
        self.rev_in_features = tuple(in_features[::-1])

    @property
    def size_divisibility(self):
        return self._size_divisibility

    def forward(self, x):
        """
        Args:
            input (dict[str->Tensor]): mapping feature map name (e.g., "res5") to
                feature map tensor for each feature level in high to low resolution order.

        Returns:
            dict[str->Tensor]:
                mapping from feature map name to FPN feature map tensor
                in high to low resolution order. Returned feature names follow the FPN
                paper convention: "p<stage>", where stage has stride = 2 ** stage e.g.,
                ["p2", "p3", ..., "p6"].
        """
        bottom_up_features = self.bottom_up(x)
        results = []
        prev_features = self.lateral_convs[0](bottom_up_features[self.in_features[-1]])
        results.append(self.output_convs[0](prev_features))

        # Reverse feature maps into top-down order (from low to high resolution)
        for features, lateral_conv, output_conv in zip(
            self.rev_in_features[1:], self.lateral_convs[1:], self.output_convs[1:]
        ):
            features = bottom_up_features[features]
            top_down_features = F.interpolate(prev_features, scale_factor=2.0, mode="nearest")
            # Has to use explicit forward due to https://github.com/pytorch/pytorch/issues/47336
            lateral_features = lateral_conv.forward(features)
            prev_features = lateral_features + top_down_features
            if self._fuse_type == "avg":
                prev_features /= 2
            results.insert(0, output_conv.forward(prev_features))

        if self.top_block is not None:
            if self.top_block.in_feature in bottom_up_features:
                top_block_in_feature = bottom_up_features[self.top_block.in_feature]
            else:
                top_block_in_feature = results[self._out_features.index(self.top_block.in_feature)]
            results.extend(self.top_block(top_block_in_feature))
        assert len(self._out_features) == len(results)
        return dict(list(zip(self._out_features, results)))

    def output_shape(self):
        return {
            name: ShapeSpec(
                channels=self._out_feature_channels[name], stride=self._out_feature_strides[name]
            )
            for name in self._out_features
        }


class FPN_Two(Backbone):
    """
    This module implements :paper:`FPN`.
    It creates pyramid features built on top of some input feature maps.
    """

    def __init__(
        self, bottom_up_rgb, bottom_up_trm, in_features, out_channels, norm="", top_block=None, fuse_type="sum"
    ):
        """
        Args:
            bottom_up (Backbone): module representing the bottom up subnetwork.
                Must be a subclass of :class:`Backbone`. The multi-scale feature
                maps generated by the bottom up network, and listed in `in_features`,
                are used to generate FPN levels.
            in_features (list[str]): names of the input feature maps coming
                from the backbone to which FPN is attached. For example, if the
                backbone produces ["res2", "res3", "res4"], any *contiguous* sublist
                of these may be used; order must be from high to low resolution.
            out_channels (int): number of channels in the output feature maps.
            norm (str): the normalization to use.
            top_block (nn.Module or None): if provided, an extra operation will
                be performed on the output of the last (smallest resolution)
                FPN output, and the result will extend the result list. The top_block
                further downsamples the feature map. It must have an attribute
                "num_levels", meaning the number of extra FPN levels added by
                this block, and "in_feature", which is a string representing
                its input feature (e.g., p5).
            fuse_type (str): types for fusing the top down features and the lateral
                ones. It can be "sum" (default), which sums up element-wise; or "avg",
                which takes the element-wise mean of the two.
        """
        super(FPN_Two, self).__init__()
        # Feature map strides and channels from the bottom up network (e.g. ResNet)
        input_shapes = bottom_up_rgb.output_shape()
        strides = [input_shapes[f].stride for f in in_features]
        in_channels_per_feature = [input_shapes[f].channels for f in in_features]

        _assert_strides_are_log2_contiguous(strides)
        lateral_convs = []
        output_convs = []
        # rgb_fc = []
        # trm_fc = []
        # fc_weight_c = 16
        use_bias = norm == ""
        for idx, in_channels in enumerate(in_channels_per_feature):
            lateral_norm = get_norm(norm, out_channels)
            output_norm = get_norm(norm, out_channels)
            # lateral_rgb_fc = nn.Linear(in_channels, fc_weight_c)
            # lateral_trm_fc = nn.Linear(in_channels, fc_weight_c)
            lateral_conv = Conv2d(
                in_channels, out_channels, kernel_size=1, bias=use_bias, norm=lateral_norm
            )
            output_conv = Conv2d(
                out_channels,
                out_channels,
                kernel_size=3,
                stride=1,
                padding=1,
                bias=use_bias,
                norm=output_norm,
            )
            weight_init.c2_xavier_fill(lateral_conv)
            weight_init.c2_xavier_fill(output_conv)
            stage = int(math.log2(strides[idx]))
            self.add_module("fpn_lateral{}".format(stage), lateral_conv)
            self.add_module("fpn_output{}".format(stage), output_conv)
            # self.add_module("fpn_lateral_trm_fc{}".format(stage), lateral_trm_fc)
            # self.add_module("fpn_lateral_rgb_fc{}".format(stage), lateral_rgb_fc)

            lateral_convs.append(lateral_conv)
            output_convs.append(output_conv)
            # trm_fc.append(lateral_trm_fc)
            # rgb_fc.append(lateral_rgb_fc)
        # Place convs into top-down order (from low to high resolution)
        # to make the top-down computation in forward clearer.
        self.lateral_convs = lateral_convs[::-1]
        self.output_convs = output_convs[::-1]
        self.top_block = top_block
        self.in_features = in_features
        self.bottom_up_rgb = bottom_up_rgb
        self.bottom_up_trm = bottom_up_trm
        # self.rgb_fc = rgb_fc
        # self.trm_fc = trm_fc
        # self.fc_mix_w = nn.Linear(2 * fc_weight_c, 2)
        # self.add_module("fpn_fc", self.fc_mix_w)
        # Return feature names are "p<stage>", like ["p2", "p3", ..., "p6"]
        self._out_feature_strides = {"p{}".format(int(math.log2(s))): s for s in strides}
        # top block output feature maps.
        if self.top_block is not None:
            for s in range(stage, stage + self.top_block.num_levels):
                self._out_feature_strides["p{}".format(s + 1)] = 2 ** (s + 1)

        self._out_features = list(self._out_feature_strides.keys())
        self._out_feature_channels = {k: out_channels for k in self._out_features}
        self._size_divisibility = strides[-1]
        assert fuse_type in {"avg", "sum"}
        self._fuse_type = fuse_type

        # Scripting does not support this: https://github.com/pytorch/pytorch/issues/47334
        # have to do it in __init__ instead.
        self.rev_in_features = tuple(in_features[::-1])

    @property
    def size_divisibility(self):
        return self._size_divisibility

    def forward(self, x):
        """
        Args:
            input (dict[str->Tensor]): mapping feature map name (e.g., "res5") to
                feature map tensor for each feature level in high to low resolution order.

        Returns:
            dict[str->Tensor]:
                mapping from feature map name to FPN feature map tensor
                in high to low resolution order. Returned feature names follow the FPN
                paper convention: "p<stage>", where stage has stride = 2 ** stage e.g.,
                ["p2", "p3", ..., "p6"].
        """
        bottom_up_rgb = self.bottom_up_rgb(x[:,:3,:,:])
        bottom_up_trm = self.bottom_up_trm(x[:,3:,:,:])
        bottom_up_features = {}
        i = 0
        bs = x.shape[0]
        keys = list(bottom_up_rgb.keys())
        for k,v in bottom_up_rgb.items():
            
            c = v.shape[1]

            # wr = F.relu(self.rgb_fc[i](F.relu(torch.mean(bottom_up_rgb[keys[-1]].view(bs,c,-1),-1).view(bs,c))))
            # wt = F.relu(self.trm_fc[i](F.relu(torch.mean(bottom_up_trm[keys[-1]].view(bs,c,-1),-1).view(bs,c))))
            # w = F.softmax(F.relu(self.fc_mix_w(torch.cat([wr,wt],dim=1))), dim=1)
            # bottom_up_features[k] = w[:,0].view(bs,1,1,1) * v + w[:,1].view(bs,1,1,1) * bottom_up_trm[k]
            # i += 1

            bottom_up_features[k] = 0.5 * (v + bottom_up_trm[k])

        
        results = []
        prev_features = self.lateral_convs[0](bottom_up_features[self.in_features[-1]])
        results.append(self.output_convs[0](prev_features))

        # Reverse feature maps into top-down order (from low to high resolution)
        for features, lateral_conv, output_conv in zip(
            self.rev_in_features[1:], self.lateral_convs[1:], self.output_convs[1:]
        ):
            features = bottom_up_features[features]
            top_down_features = F.interpolate(prev_features, scale_factor=2.0, mode="nearest")
            # Has to use explicit forward due to https://github.com/pytorch/pytorch/issues/47336
            lateral_features = lateral_conv.forward(features)
            prev_features = lateral_features + top_down_features
            if self._fuse_type == "avg":
                prev_features /= 2
            results.insert(0, output_conv.forward(prev_features))

        if self.top_block is not None:
            if self.top_block.in_feature in bottom_up_features:
                top_block_in_feature = bottom_up_features[self.top_block.in_feature]
            else:
                top_block_in_feature = results[self._out_features.index(self.top_block.in_feature)]
            results.extend(self.top_block(top_block_in_feature))
        assert len(self._out_features) == len(results)
        return dict(list(zip(self._out_features, results)))

    def output_shape(self):
        return {
            name: ShapeSpec(
                channels=self._out_feature_channels[name], stride=self._out_feature_strides[name]
            )
            for name in self._out_features
        }



class FPN_Two_Fusion(Backbone):
    """
    This module implements :paper:`FPN`.
    It creates pyramid features built on top of some input feature maps.
    """

    def __init__(
        self, bottom_up_rgb, bottom_up_trm, in_features, out_channels, norm="", top_block=None, fuse_type="sum"
    ):
        """
        Args:
            bottom_up (Backbone): module representing the bottom up subnetwork.
                Must be a subclass of :class:`Backbone`. The multi-scale feature
                maps generated by the bottom up network, and listed in `in_features`,
                are used to generate FPN levels.
            in_features (list[str]): names of the input feature maps coming
                from the backbone to which FPN is attached. For example, if the
                backbone produces ["res2", "res3", "res4"], any *contiguous* sublist
                of these may be used; order must be from high to low resolution.
            out_channels (int): number of channels in the output feature maps.
            norm (str): the normalization to use.
            top_block (nn.Module or None): if provided, an extra operation will
                be performed on the output of the last (smallest resolution)
                FPN output, and the result will extend the result list. The top_block
                further downsamples the feature map. It must have an attribute
                "num_levels", meaning the number of extra FPN levels added by
                this block, and "in_feature", which is a string representing
                its input feature (e.g., p5).
            fuse_type (str): types for fusing the top down features and the lateral
                ones. It can be "sum" (default), which sums up element-wise; or "avg",
                which takes the element-wise mean of the two.
        """
        super(FPN_Two, self).__init__()
        # Feature map strides and channels from the bottom up network (e.g. ResNet)
        input_shapes = bottom_up_rgb.output_shape()
        strides = [input_shapes[f].stride for f in in_features]
        in_channels_per_feature = [input_shapes[f].channels for f in in_features]

        _assert_strides_are_log2_contiguous(strides)
        lateral_convs = []
        output_convs = []
        rgb_fc = []
        trm_fc = []
        fc_weight_c = 16
        use_bias = norm == ""
        for idx, in_channels in enumerate(in_channels_per_feature):
            lateral_norm = get_norm(norm, out_channels)
            output_norm = get_norm(norm, out_channels)
            lateral_rgb_fc = nn.Linear(in_channels, fc_weight_c)
            lateral_trm_fc = nn.Linear(in_channels, fc_weight_c)
            lateral_conv = Conv2d(
                in_channels, out_channels, kernel_size=1, bias=use_bias, norm=lateral_norm
            )
            output_conv = Conv2d(
                out_channels,
                out_channels,
                kernel_size=3,
                stride=1,
                padding=1,
                bias=use_bias,
                norm=output_norm,
            )
            weight_init.c2_xavier_fill(lateral_conv)
            weight_init.c2_xavier_fill(output_conv)
            stage = int(math.log2(strides[idx]))
            self.add_module("fpn_lateral{}".format(stage), lateral_conv)
            self.add_module("fpn_output{}".format(stage), output_conv)
            self.add_module("fpn_lateral_trm_fc{}".format(stage), lateral_trm_fc)
            self.add_module("fpn_lateral_rgb_fc{}".format(stage), lateral_rgb_fc)

            lateral_convs.append(lateral_conv)
            output_convs.append(output_conv)
            trm_fc.append(lateral_trm_fc)
            rgb_fc.append(lateral_rgb_fc)
        # Place convs into top-down order (from low to high resolution)
        # to make the top-down computation in forward clearer.
        self.lateral_convs = lateral_convs[::-1]
        self.output_convs = output_convs[::-1]
        self.top_block = top_block
        self.in_features = in_features
        self.bottom_up_rgb = bottom_up_rgb
        self.bottom_up_trm = bottom_up_trm
        self.rgb_fc = rgb_fc
        self.trm_fc = trm_fc
        self.fc_mix_w = nn.Linear(2 * fc_weight_c, 2)
        self.add_module("fpn_fc", self.fc_mix_w)
        # Return feature names are "p<stage>", like ["p2", "p3", ..., "p6"]
        self._out_feature_strides = {"p{}".format(int(math.log2(s))): s for s in strides}
        # top block output feature maps.
        if self.top_block is not None:
            for s in range(stage, stage + self.top_block.num_levels):
                self._out_feature_strides["p{}".format(s + 1)] = 2 ** (s + 1)

        self._out_features = list(self._out_feature_strides.keys())
        self._out_feature_channels = {k: out_channels for k in self._out_features}
        self._size_divisibility = strides[-1]
        assert fuse_type in {"avg", "sum"}
        self._fuse_type = fuse_type

        # Scripting does not support this: https://github.com/pytorch/pytorch/issues/47334
        # have to do it in __init__ instead.
        self.rev_in_features = tuple(in_features[::-1])

    @property
    def size_divisibility(self):
        return self._size_divisibility

    def forward(self, x):
        """
        Args:
            input (dict[str->Tensor]): mapping feature map name (e.g., "res5") to
                feature map tensor for each feature level in high to low resolution order.

        Returns:
            dict[str->Tensor]:
                mapping from feature map name to FPN feature map tensor
                in high to low resolution order. Returned feature names follow the FPN
                paper convention: "p<stage>", where stage has stride = 2 ** stage e.g.,
                ["p2", "p3", ..., "p6"].
        """
        bottom_up_rgb = self.bottom_up_rgb(x[:,:3,:,:])
        bottom_up_trm = self.bottom_up_trm(x[:,3:,:,:])
        bottom_up_features = {}
        i = 0
        bs = x.shape[0]
        keys = list(bottom_up_rgb.keys())
        for k,v in bottom_up_rgb.items():
            
            c = v.shape[1]

            wr = F.relu(self.rgb_fc[i](F.relu(torch.mean(bottom_up_rgb[keys[-1]].view(bs,c,-1),-1).view(bs,c))))
            wt = F.relu(self.trm_fc[i](F.relu(torch.mean(bottom_up_trm[keys[-1]].view(bs,c,-1),-1).view(bs,c))))
            w = F.softmax(F.relu(self.fc_mix_w(torch.cat([wr,wt],dim=1))), dim=1)
            bottom_up_features[k] = w[:,0].view(bs,1,1,1) * v + w[:,1].view(bs,1,1,1) * bottom_up_trm[k]
            i += 1


        
        results = []
        prev_features = self.lateral_convs[0](bottom_up_features[self.in_features[-1]])
        results.append(self.output_convs[0](prev_features))

        # Reverse feature maps into top-down order (from low to high resolution)
        for features, lateral_conv, output_conv in zip(
            self.rev_in_features[1:], self.lateral_convs[1:], self.output_convs[1:]
        ):
            features = bottom_up_features[features]
            top_down_features = F.interpolate(prev_features, scale_factor=2.0, mode="nearest")
            # Has to use explicit forward due to https://github.com/pytorch/pytorch/issues/47336
            lateral_features = lateral_conv.forward(features)
            prev_features = lateral_features + top_down_features
            if self._fuse_type == "avg":
                prev_features /= 2
            results.insert(0, output_conv.forward(prev_features))

        if self.top_block is not None:
            if self.top_block.in_feature in bottom_up_features:
                top_block_in_feature = bottom_up_features[self.top_block.in_feature]
            else:
                top_block_in_feature = results[self._out_features.index(self.top_block.in_feature)]
            results.extend(self.top_block(top_block_in_feature))
        assert len(self._out_features) == len(results)
        return dict(list(zip(self._out_features, results)))

    def output_shape(self):
        return {
            name: ShapeSpec(
                channels=self._out_feature_channels[name], stride=self._out_feature_strides[name]
            )
            for name in self._out_features
        }


class FPN_Two_Fusion_Mask(Backbone):
    """
    This module implements :paper:`FPN`.
    It creates pyramid features built on top of some input feature maps.
    """

    def __init__(
        self, bottom_up_rgb, bottom_up_trm, in_features, out_channels, norm="", top_block=None, fuse_type="sum",
        embed_features=640, cls_feats = None
    ):
        """
        Args:
            bottom_up (Backbone): module representing the bottom up subnetwork.
                Must be a subclass of :class:`Backbone`. The multi-scale feature
                maps generated by the bottom up network, and listed in `in_features`,
                are used to generate FPN levels.
            in_features (list[str]): names of the input feature maps coming
                from the backbone to which FPN is attached. For example, if the
                backbone produces ["res2", "res3", "res4"], any *contiguous* sublist
                of these may be used; order must be from high to low resolution.
            out_channels (int): number of channels in the output feature maps.
            norm (str): the normalization to use.
            top_block (nn.Module or None): if provided, an extra operation will
                be performed on the output of the last (smallest resolution)
                FPN output, and the result will extend the result list. The top_block
                further downsamples the feature map. It must have an attribute
                "num_levels", meaning the number of extra FPN levels added by
                this block, and "in_feature", which is a string representing
                its input feature (e.g., p5).
            fuse_type (str): types for fusing the top down features and the lateral
                ones. It can be "sum" (default), which sums up element-wise; or "avg",
                which takes the element-wise mean of the two.
        """
        super(FPN_Two_Fusion_Mask, self).__init__()
        assert isinstance(bottom_up_rgb, Backbone)
        assert isinstance(bottom_up_trm, Backbone)
        assert in_features, in_features
        


        # Feature map strides and channels from the bottom up network (e.g. ResNet)
        input_shapes = bottom_up_rgb.output_shape()
        strides = [input_shapes[f].stride for f in in_features]
        in_channels_per_feature = [input_shapes[f].channels for f in in_features]

        _assert_strides_are_log2_contiguous(strides)
        lateral_convs = []
        output_convs = []
        rgb_fc = []
        trm_fc = []
        fc_weight_c = 16

        use_bias = norm == ""
        for idx, in_channels in enumerate(in_channels_per_feature):
            lateral_norm = get_norm(norm, out_channels)
            output_norm = get_norm(norm, out_channels)

            lateral_rgb_fc = nn.Linear(in_channels, fc_weight_c)
            lateral_trm_fc = nn.Linear(in_channels, fc_weight_c)

            lateral_conv = Conv2d(
                in_channels, out_channels, kernel_size=1, bias=use_bias, norm=lateral_norm
            )
            output_conv = Conv2d(
                out_channels,
                out_channels,
                kernel_size=3,
                stride=1,
                padding=1,
                bias=use_bias,
                norm=output_norm,
            )
            weight_init.c2_xavier_fill(lateral_conv)
            weight_init.c2_xavier_fill(output_conv)
            stage = int(math.log2(strides[idx]))
            self.add_module("fpn_lateral{}".format(stage), lateral_conv)
            self.add_module("fpn_output{}".format(stage), output_conv)

            self.add_module("fpn_lateral_trm_fc{}".format(stage), lateral_trm_fc)
            self.add_module("fpn_lateral_rgb_fc{}".format(stage), lateral_rgb_fc)


            lateral_convs.append(lateral_conv)
            output_convs.append(output_conv)
            trm_fc.append(lateral_trm_fc)
            rgb_fc.append(lateral_rgb_fc)
        # Place convs into top-down order (from low to high resolution)
        # to make the top-down computation in forward clearer.
        self.lateral_convs = lateral_convs[::-1]
        self.output_convs = output_convs[::-1]
        self.top_block = top_block
        self.in_features = in_features
        self.bottom_up_rgb = bottom_up_rgb
        self.bottom_up_trm = bottom_up_trm

        self.rgb_fc = rgb_fc
        self.trm_fc = trm_fc
        self.fc_mix_w = nn.Linear(2 * fc_weight_c, 2)
        self.add_module("fpn_fc", self.fc_mix_w)


        # Return feature names are "p<stage>", like ["p2", "p3", ..., "p6"]
        self._out_feature_strides = {"p{}".format(int(math.log2(s))): s for s in strides}
        # top block output feature maps.
        if self.top_block is not None:
            for s in range(stage, stage + self.top_block.num_levels):
                self._out_feature_strides["p{}".format(s + 1)] = 2 ** (s + 1)

        self._out_features = list(self._out_feature_strides.keys())
        self._out_feature_channels = {k: out_channels for k in self._out_features}
        self._size_divisibility = strides[-1]
        assert fuse_type in {"avg", "sum"}
        self._fuse_type = fuse_type

        # Scripting does not support this: https://github.com/pytorch/pytorch/issues/47334
        # have to do it in __init__ instead.
        self.rev_in_features = tuple(in_features[::-1])

        self.cls_fcs_1 = nn.ModuleList()
        self.cls_fcs_2 = nn.ModuleList()
        self.cls_feats = cls_feats #torch.load("./cls_tensor/10_6_4.pt").cuda().float()
        in_c = self.cls_feats.shape[-1]
        for _ in range(len(self._out_features)):
            self.cls_fcs_1.append(
                nn.Linear(in_c, embed_features),
                )
            self.cls_fcs_2.append(
                nn.Linear(embed_features, out_channels)
                )
        
    

    @property
    def size_divisibility(self):
        return self._size_divisibility

    def forward(self, x, pre_masks=None):
        """
        Args:
            input (dict[str->Tensor]): mapping feature map name (e.g., "res5") to
                feature map tensor for each feature level in high to low resolution order.

        Returns:
            dict[str->Tensor]:
                mapping from feature map name to FPN feature map tensor
                in high to low resolution order. Returned feature names follow the FPN
                paper convention: "p<stage>", where stage has stride = 2 ** stage e.g.,
                ["p2", "p3", ..., "p6"].
        """
        if not self.training:
            # bottom_up_gate_num = 0
            # bottom_up_rgb = self.bottom_up_rgb(x[:,:3,:,:], pre_masks)
            # bottom_up_gate_num += bottom_up_rgb['cnt']
            # bottom_up_rgb = bottom_up_rgb['feats']
            # bottom_up_trm = self.bottom_up_trm(x[:,3:,:,:], pre_masks[bottom_up_gate_num:])
            # bottom_up_gate_num += bottom_up_trm['cnt']
            # bottom_up_trm = bottom_up_trm['feats']
            bottom_up_rgb = self.bottom_up_rgb(x[:,:3,:,:])['feats']
            bottom_up_trm = self.bottom_up_trm(x[:,3:,:,:])['feats']
            bottom_up_gate_num = 0


            bottom_up_features = {}
            i = 0
            bs = x.shape[0]
            keys = list(bottom_up_rgb.keys())
            for k,v in bottom_up_rgb.items():
                bottom_up_features[k] = []
                c = v.shape[1]
                # import pdb; pdb.set_trace()
                for j in range(len(pre_masks[3])):
                    wr = F.relu(self.rgb_fc[i](F.relu(torch.mean((bottom_up_rgb[keys[-1]]*pre_masks[3][j]).view(bs,c,-1),-1).view(bs,c))))
                    # bottom_up_gate_num += 1
                    wt = F.relu(self.trm_fc[i](F.relu(torch.mean((bottom_up_trm[keys[-1]]*pre_masks[7][j]).view(bs,c,-1),-1).view(bs,c))))
                    # bottom_up_gate_num += 1
                    w = F.softmax(F.relu(self.fc_mix_w(torch.cat([wr,wt],dim=1))), dim=1)
                    bottom_up_features[k].append(w[:,0].view(bs,1,1,1) * v*pre_masks[i][j] + w[:,1].view(bs,1,1,1) * bottom_up_trm[k]*pre_masks[i+4][j])
                i += 1

            bottom_up_gate_num = 8
            task_num = len(pre_masks[0])
            results = self.fpn_features(bottom_up_features, task_num)
            for i, i_results in enumerate(results): # ith task
                for j, j_cur_res in enumerate(i_results): # jth stage
                    results[i][j_cur_res] = pre_masks[bottom_up_gate_num + j][i] * results[i][j_cur_res]
            # results = self.change_shape(results)
            return results, bottom_up_features, None
        else:
            # bottom_up_rgb = self.bottom_up_rgb(x[:,:3,:,:], pre_masks)
            # rgb_masks = bottom_up_rgb['mask']
            # rgb_dloss = bottom_up_rgb['dloss']
            # bottom_up_rgb = bottom_up_rgb['feats']
            # bottom_up_trm = self.bottom_up_trm(x[:,3:,:,:], pre_masks)
            # trm_masks = bottom_up_trm['mask']
            # trm_dloss = bottom_up_trm['dloss']
            # bottom_up_trm = bottom_up_trm['feats']
            # task_masks = rgb_masks + trm_masks
            bottom_up_rgb = self.bottom_up_rgb(x[:,:3,:,:])
            rgb_masks = bottom_up_rgb['mask']
            bottom_up_rgb = bottom_up_rgb['feats']
            bottom_up_trm = self.bottom_up_trm(x[:,3:,:,:])
            trm_masks = bottom_up_trm['mask']
            bottom_up_trm = bottom_up_trm['feats']
            task_masks = rgb_masks + trm_masks


            bottom_up_features = {}
            i = 0
            bs = x.shape[0]
            keys = list(bottom_up_rgb.keys())
            for k,v in bottom_up_rgb.items():
                bottom_up_features[k] = []
                # import pdb; pdb.set_trace()
                # for j,v in enumerate(vs):
                c = v.shape[1]
                wr = F.relu(self.rgb_fc[i](F.relu(torch.mean((bottom_up_rgb[keys[-1]]*rgb_masks[-1]).view(bs,c,-1),-1).view(bs,c))))
                wt = F.relu(self.trm_fc[i](F.relu(torch.mean((bottom_up_trm[keys[-1]]*trm_masks[-1]).view(bs,c,-1),-1).view(bs,c))))
                w = F.softmax(F.relu(self.fc_mix_w(torch.cat([wr,wt],dim=1))), dim=1)
                bottom_up_features[k].append(w[:,0].view(bs,1,1,1) * v * rgb_masks[i]  + w[:,1].view(bs,1,1,1) * bottom_up_trm[k] * trm_masks[i])
                if pre_masks is not None:
                    for j in range(len(pre_masks[0])):
                        wr = F.relu(self.rgb_fc[i](F.relu(torch.mean((bottom_up_rgb[keys[-1]]*pre_masks[3][j]).view(bs,c,-1),-1).view(bs,c))))
                        wt = F.relu(self.trm_fc[i](F.relu(torch.mean((bottom_up_trm[keys[-1]]*pre_masks[7][j]).view(bs,c,-1),-1).view(bs,c))))
                        w = F.softmax(F.relu(self.fc_mix_w(torch.cat([wr,wt],dim=1))), dim=1)
                        bottom_up_features[k].append(w[:,0].view(bs,1,1,1) * v * pre_masks[i][j]  + w[:,1].view(bs,1,1,1) * bottom_up_trm[k] * pre_masks[i+4][j])
                i += 1

            # outputs{name:[cur_features, old_features]}, div_loss=float, task_masks=[gate0, gate1...]
            # div_loss = rgb_dloss + trm_dloss  
            bottom_up_gate_num = len(task_masks)
            cur_task_masks = []
            for i in range(len(self.cls_fcs_1)):
                gate = self.cls_fcs_1[i](self.cls_feats)
                gate = F.relu(gate).view(1,-1)
                gate = self.cls_fcs_2[i](gate)
                gate = F.sigmoid(gate).view(1,-1,1,1)
                # div_loss += (gate.sum() / gate.shape[1]).sum() # mask sparse
                cur_task_masks.append([gate,])
            task_masks += cur_task_masks
            task_num = 1
            if pre_masks is not None:
                task_num = len(pre_masks[bottom_up_gate_num]) + 1
            results = self.fpn_features(bottom_up_features, task_num) # [cur_result, task0_result, 1_result]
            for i, i_results in enumerate(results):
                if i == 0:
                    for j, j_cur_res in enumerate(i_results):
                        results[i][j_cur_res] = cur_task_masks[j][0] * results[i][j_cur_res]
                        # if pre_masks is not None:
                        #     for pre_mask in pre_masks[bottom_up_gate_num + j]:
                        #         div_loss += 1 / (1 + F.l1_loss(cur_task_masks[j][0], pre_mask))
                            # div_loss += (sum(cur_task_masks[j][0]) / cur_task_masks[j][0].shape[1]).sum()
                else:

                    for j, j_cur_res in enumerate(i_results):
                        results[i][j_cur_res] = pre_masks[bottom_up_gate_num + j][i - 1] * results[i][j_cur_res]
                        
            # results = self.change_shape(results)
            return results, bottom_up_features, task_masks
        
    def change_shape(self, outs):
        results = [[] for _ in self._out_features]
        for out in outs:
            for i,o in enumerate(out):
                results[i].append(o)
        assert len(self._out_features) == len(results)
        return results
        
    def fpn_features(self, bottom_up_features, task_num=1):
        outs = []
        bottom_up_features_dict = {}
        for i in range(task_num):
            for k,v in bottom_up_features.items():
                if len(v) > 1:
                    bottom_up_features_dict[k] = v[i]
                else:
                    bottom_up_features_dict[k] = v[0]
            results = []
            prev_features = self.lateral_convs[0](bottom_up_features_dict[self.in_features[-1]])
            results.append(self.output_convs[0](prev_features))

            # Reverse feature maps into top-down order (from low to high resolution)
            for features, lateral_conv, output_conv in zip(
                self.rev_in_features[1:], self.lateral_convs[1:], self.output_convs[1:]
            ):
                features = bottom_up_features_dict[features]
                top_down_features = F.interpolate(prev_features, scale_factor=2.0, mode="nearest")
                # Has to use explicit forward due to https://github.com/pytorch/pytorch/issues/47336
                lateral_features = lateral_conv.forward(features)
                prev_features = lateral_features + top_down_features
                if self._fuse_type == "avg":
                    prev_features /= 2
                results.insert(0, output_conv.forward(prev_features))

            if self.top_block is not None:
                if self.top_block.in_feature in bottom_up_features_dict:
                    top_block_in_feature = bottom_up_features_dict[self.top_block.in_feature]
                else:
                    top_block_in_feature = results[self._out_features.index(self.top_block.in_feature)]
                results.extend(self.top_block(top_block_in_feature))
            results = dict(list(zip(self._out_features, results)))
            outs.append(results) # [n_task, {origin_results}]
        return outs



    def output_shape(self):
        return {
            name: ShapeSpec(
                channels=self._out_feature_channels[name], stride=self._out_feature_strides[name]
            )
            for name in self._out_features
        }



def _assert_strides_are_log2_contiguous(strides):
    """
    Assert that each stride is 2x times its preceding stride, i.e. "contiguous in log2".
    """
    for i, stride in enumerate(strides[1:], 1):
        assert stride == 2 * strides[i - 1], "Strides {} {} are not log2 contiguous".format(
            stride, strides[i - 1]
        )


class LastLevelMaxPool(nn.Module):
    """
    This module is used in the original FPN to generate a downsampled
    P6 feature from P5.
    """

    def __init__(self):
        super().__init__()
        self.num_levels = 1
        self.in_feature = "p5"

    def forward(self, x):
        return [F.max_pool2d(x, kernel_size=1, stride=2, padding=0)]


class LastLevelP6P7(nn.Module):
    """
    This module is used in RetinaNet to generate extra layers, P6 and P7 from
    C5 feature.
    """

    def __init__(self, in_channels, out_channels, in_feature="res5"):
        super().__init__()
        self.num_levels = 2
        self.in_feature = in_feature
        self.p6 = nn.Conv2d(in_channels, out_channels, 3, 2, 1)
        self.p7 = nn.Conv2d(out_channels, out_channels, 3, 2, 1)
        for module in [self.p6, self.p7]:
            weight_init.c2_xavier_fill(module)

    def forward(self, c5):
        p6 = self.p6(c5)
        p7 = self.p7(F.relu(p6))
        return [p6, p7]


@BACKBONE_REGISTRY.register()
def build_resnet_fpn_backbone(cfg, input_shape: ShapeSpec):
    """
    Args:
        cfg: a detectron2 CfgNode

    Returns:
        backbone (Backbone): backbone module, must be a subclass of :class:`Backbone`.
    """
    bottom_up = build_resnet_backbone(cfg, input_shape)
    in_features = cfg.MODEL.FPN.IN_FEATURES
    out_channels = cfg.MODEL.FPN.OUT_CHANNELS
    backbone = FPN(
        bottom_up=bottom_up,
        in_features=in_features,
        out_channels=out_channels,
        norm=cfg.MODEL.FPN.NORM,
        top_block=LastLevelMaxPool(),
        fuse_type=cfg.MODEL.FPN.FUSE_TYPE,
    )
    return backbone

@BACKBONE_REGISTRY.register()
def build_two_resnet_fpn_backbone(cfg, input_shape: ShapeSpec):
    """
    Args:
        cfg: a detectron2 CfgNode

    Returns:
        backbone (Backbone): backbone module, must be a subclass of :class:`Backbone`.
    """
    bottom_up_rgb= build_resnet_backbone(cfg, input_shape)
    bottom_up_trm= build_resnet_backbone(cfg, input_shape)
    in_features = cfg.MODEL.FPN.IN_FEATURES
    out_channels = cfg.MODEL.FPN.OUT_CHANNELS
    backbone = FPN_Two(
        bottom_up_rgb=bottom_up_rgb,
        bottom_up_trm=bottom_up_trm,
        in_features=in_features,
        out_channels=out_channels,
        norm=cfg.MODEL.FPN.NORM,
        top_block=LastLevelMaxPool(),
        fuse_type=cfg.MODEL.FPN.FUSE_TYPE,
    )
    return backbone


@BACKBONE_REGISTRY.register()
def build_two_iod_resnet_fpn_backbone(cfg, input_shape: ShapeSpec):
    """
    Args:
        cfg: a detectron2 CfgNode

    Returns:
        backbone (Backbone): backbone module, must be a subclass of :class:`Backbone`.
    """
    cls_feats = torch.load(cfg.MODEL.FEATS).cuda().float()[cfg.MODEL.TASK].unsqueeze(0)
    bottom_up_rgb= build_resnet_mask_backbone(cfg, input_shape, cls_feats=cls_feats)
    bottom_up_trm= build_resnet_mask_backbone(cfg, input_shape, cls_feats=cls_feats)
    in_features = cfg.MODEL.FPN.IN_FEATURES
    out_channels = cfg.MODEL.FPN.OUT_CHANNELS
    
    backbone = FPN_Two_Fusion_Mask(
        bottom_up_rgb=bottom_up_rgb,
        bottom_up_trm=bottom_up_trm,
        cls_feats=cls_feats,
        in_features=in_features,
        out_channels=out_channels,
        norm=cfg.MODEL.FPN.NORM,
        top_block=LastLevelMaxPool(),
        fuse_type=cfg.MODEL.FPN.FUSE_TYPE,
    )
    return backbone



@BACKBONE_REGISTRY.register()
def build_retinanet_resnet_fpn_backbone(cfg, input_shape: ShapeSpec):
    """
    Args:
        cfg: a detectron2 CfgNode

    Returns:
        backbone (Backbone): backbone module, must be a subclass of :class:`Backbone`.
    """
    bottom_up = build_resnet_backbone(cfg, input_shape)
    in_features = cfg.MODEL.FPN.IN_FEATURES
    out_channels = cfg.MODEL.FPN.OUT_CHANNELS
    in_channels_p6p7 = bottom_up.output_shape()["res5"].channels
    backbone = FPN(
        bottom_up=bottom_up,
        in_features=in_features,
        out_channels=out_channels,
        norm=cfg.MODEL.FPN.NORM,
        top_block=LastLevelP6P7(in_channels_p6p7, out_channels),
        fuse_type=cfg.MODEL.FPN.FUSE_TYPE,
    )
    return backbone
